image: docker:20.10

services:
  - docker:dind

stages:
  - build
  - test
  - deploy
  - preprod
  - integration
  - prod

build_job:
  stage: build
  script:
    - echo "I'm a job"

secrets-scanning:
  stage: build
  script:
    - docker run --rm hysnsec/detect-secrets:latest scan > detect-secrets-report.json #Download the tool using latest docker version. Run the command scan as parameter
  artifacts:
    paths:
      - detect-secrets-report.json
  allow_failure: true #even if the job fails, continue to next steps

os_hardening:
  stage: deploy 
  image: willhallonline/ansible:2.9-ubuntu-18.04
  before_script:
    - mkdir -p ~/.ssh
    - echo "$DEPLOYMENT_SERVER_SSH_PRIVKEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -t rsa $DEPLOYMENT_SERVER >> ~/.ssh/known_hosts
  script:
    - echo -e "[prod]\n$DEPLOYMENT_SERVER" >> inventory.ini
    - ansible-galaxy install dev-sec.os-hardening
    - ansible-playbook -i inventory.ini ansible-hardening.yml > hardeningresults.json
  artifacts:
    paths: [hardeningresults.json] # Save the results for the server

zap:
  stage: integration
  before_script:
    - apk add py-pip py-requests # Install needed decencies
    - docker pull softwaresecurityproject/zap-stable:2.13.0
  script:
    - docker run --user $(id -u):$(id -g) -w /zap -v $(pwd):/zap/wrk:rw --rm softwaresecurityproject/zap-stable:2.13.0 zap-baseline.py -t https://prod-dofdkwc4.lab.practical-devsecops.training -d -x zap-output.xml
  after_script:
    - python3 upload-results.py --host $DOJO_HOST --api_key $DOJO_API_TOKEN --engagement_id 1 --product_id 1 --lead_id 1 --environment "Production" --result_file zap-output.xml --scanner "ZAP Scan" # configure API ja HOST from the GitLab Settings
  artifacts:
    paths: [zap-output.xml]
    when: always
    expire_in: 1 day
